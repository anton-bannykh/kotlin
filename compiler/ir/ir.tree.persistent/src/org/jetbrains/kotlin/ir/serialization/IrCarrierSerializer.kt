/*
 * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.ir.serialization

import org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall as ProtoIrConstructorCall
import org.jetbrains.kotlin.backend.common.serialization.proto.IrType as ProtoIrType
import org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable as ProtoIrVariable
import org.jetbrains.kotlin.backend.common.serialization.proto.PirAnonymousInitializerCarrier
import org.jetbrains.kotlin.backend.common.serialization.proto.PirClassCarrier
import org.jetbrains.kotlin.backend.common.serialization.proto.PirConstructorCarrier
import org.jetbrains.kotlin.backend.common.serialization.proto.PirEnumEntryCarrier
import org.jetbrains.kotlin.backend.common.serialization.proto.PirErrorDeclarationCarrier
import org.jetbrains.kotlin.backend.common.serialization.proto.PirFieldCarrier
import org.jetbrains.kotlin.backend.common.serialization.proto.PirFunctionCarrier
import org.jetbrains.kotlin.backend.common.serialization.proto.PirLocalDelegatedPropertyCarrier
import org.jetbrains.kotlin.backend.common.serialization.proto.PirPropertyCarrier
import org.jetbrains.kotlin.backend.common.serialization.proto.PirTypeAliasCarrier
import org.jetbrains.kotlin.backend.common.serialization.proto.PirTypeParameterCarrier
import org.jetbrains.kotlin.backend.common.serialization.proto.PirValueParameterCarrier
import org.jetbrains.kotlin.descriptors.DescriptorVisibility
import org.jetbrains.kotlin.descriptors.Modality
import org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin
import org.jetbrains.kotlin.ir.declarations.IrDeclarationParent
import org.jetbrains.kotlin.ir.declarations.IrVariable
import org.jetbrains.kotlin.ir.declarations.persistent.carriers.AnonymousInitializerCarrier
import org.jetbrains.kotlin.ir.declarations.persistent.carriers.ClassCarrier
import org.jetbrains.kotlin.ir.declarations.persistent.carriers.ConstructorCarrier
import org.jetbrains.kotlin.ir.declarations.persistent.carriers.EnumEntryCarrier
import org.jetbrains.kotlin.ir.declarations.persistent.carriers.ErrorDeclarationCarrier
import org.jetbrains.kotlin.ir.declarations.persistent.carriers.FieldCarrier
import org.jetbrains.kotlin.ir.declarations.persistent.carriers.FunctionCarrier
import org.jetbrains.kotlin.ir.declarations.persistent.carriers.LocalDelegatedPropertyCarrier
import org.jetbrains.kotlin.ir.declarations.persistent.carriers.PropertyCarrier
import org.jetbrains.kotlin.ir.declarations.persistent.carriers.TypeAliasCarrier
import org.jetbrains.kotlin.ir.declarations.persistent.carriers.TypeParameterCarrier
import org.jetbrains.kotlin.ir.declarations.persistent.carriers.ValueParameterCarrier
import org.jetbrains.kotlin.ir.expressions.IrBlockBody
import org.jetbrains.kotlin.ir.expressions.IrBody
import org.jetbrains.kotlin.ir.expressions.IrConstructorCall
import org.jetbrains.kotlin.ir.expressions.IrExpressionBody
import org.jetbrains.kotlin.ir.symbols.IrClassSymbol
import org.jetbrains.kotlin.ir.symbols.IrFieldSymbol
import org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol
import org.jetbrains.kotlin.ir.symbols.IrPropertySymbol
import org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol
import org.jetbrains.kotlin.ir.symbols.IrTypeParameterSymbol
import org.jetbrains.kotlin.ir.symbols.IrValueParameterSymbol
import org.jetbrains.kotlin.ir.types.IrType

// Auto-generated by compiler/ir/ir.tree/src/org/jetbrains/kotlin/ir/persistentIrGenerator/Main.kt. DO NOT EDIT!

internal abstract class IrCarrierSerializer {

    abstract fun serializeParent(proto: IrDeclarationParent): Long

    abstract fun serializeOrigin(proto: IrDeclarationOrigin): Int

    abstract fun serializeAnnotation(proto: IrConstructorCall): ProtoIrConstructorCall

    abstract fun serializeBody(proto: IrBody): Int

    abstract fun serializeBlockBody(proto: IrBlockBody): Int

    abstract fun serializeExpressionBody(proto: IrExpressionBody): Int

    abstract fun serializeValueParameter(proto: IrValueParameterSymbol): Long

    abstract fun serializeTypeParameter(proto: IrTypeParameterSymbol): Long

    abstract fun serializeSuperType(proto: IrType): Int

    abstract fun serializeType(proto: IrType): ProtoIrType

    abstract fun serializeClass(proto: IrClassSymbol): Long

    abstract fun serializePropertySymbol(proto: IrPropertySymbol): Long

    abstract fun serializeSimpleFunction(proto: IrSimpleFunctionSymbol): Long

    abstract fun serializeSimpleFunctionSymbol(proto: IrSimpleFunctionSymbol): Long

    abstract fun serializeFunction(proto: IrFunctionSymbol): Long

    abstract fun serializeField(proto: IrFieldSymbol): Long

    abstract fun serializeVariable(proto: IrVariable): ProtoIrVariable

    abstract fun serializeVisibility(proto: DescriptorVisibility): Long

    abstract fun serializeModality(proto: Modality): Long

    fun serializeAnonymousInitializerCarrier(carrier: AnonymousInitializerCarrier): PirAnonymousInitializerCarrier {
        val proto = PirAnonymousInitializerCarrier.newBuilder()
        proto.setLastModified(carrier.lastModified)
        carrier.parentField?.let { proto.setParentSymbol(serializeParent(it)) }
        proto.setOrigin(serializeOrigin(carrier.originField))
        proto.addAllAnnotation(carrier.annotationsField.map { serializeAnnotation(it) })
        carrier.bodyField?.let { proto.setBody(serializeBlockBody(it)) }
        return proto.build()
    }

    fun serializeClassCarrier(carrier: ClassCarrier): PirClassCarrier {
        val proto = PirClassCarrier.newBuilder()
        proto.setLastModified(carrier.lastModified)
        carrier.parentField?.let { proto.setParentSymbol(serializeParent(it)) }
        proto.setOrigin(serializeOrigin(carrier.originField))
        proto.addAllAnnotation(carrier.annotationsField.map { serializeAnnotation(it) })
        carrier.thisReceiverField?.let { proto.setThisReceiver(serializeValueParameter(it)) }
        proto.setFlags(serializeVisibility(carrier.visibilityField) or serializeModality(carrier.modalityField))
        proto.addAllTypeParameters(carrier.typeParametersField.map { serializeTypeParameter(it) })
        proto.addAllSuperTypes(carrier.superTypesField.map { serializeSuperType(it) })
        return proto.build()
    }

    fun serializeConstructorCarrier(carrier: ConstructorCarrier): PirConstructorCarrier {
        val proto = PirConstructorCarrier.newBuilder()
        proto.setLastModified(carrier.lastModified)
        carrier.parentField?.let { proto.setParentSymbol(serializeParent(it)) }
        proto.setOrigin(serializeOrigin(carrier.originField))
        proto.addAllAnnotation(carrier.annotationsField.map { serializeAnnotation(it) })
        proto.setReturnTypeField(serializeType(carrier.returnTypeFieldField))
        carrier.dispatchReceiverParameterField?.let { proto.setDispatchReceiverParameter(serializeValueParameter(it)) }
        carrier.extensionReceiverParameterField?.let { proto.setExtensionReceiverParameter(serializeValueParameter(it)) }
        carrier.bodyField?.let { proto.setBody(serializeBody(it)) }
        proto.setFlags(serializeVisibility(carrier.visibilityField))
        proto.addAllTypeParameters(carrier.typeParametersField.map { serializeTypeParameter(it) })
        proto.addAllValueParameters(carrier.valueParametersField.map { serializeValueParameter(it) })
        return proto.build()
    }

    fun serializeEnumEntryCarrier(carrier: EnumEntryCarrier): PirEnumEntryCarrier {
        val proto = PirEnumEntryCarrier.newBuilder()
        proto.setLastModified(carrier.lastModified)
        carrier.parentField?.let { proto.setParentSymbol(serializeParent(it)) }
        proto.setOrigin(serializeOrigin(carrier.originField))
        proto.addAllAnnotation(carrier.annotationsField.map { serializeAnnotation(it) })
        carrier.correspondingClassField?.let { proto.setCorrespondingClass(serializeClass(it)) }
        carrier.initializerExpressionField?.let { proto.setInitializerExpression(serializeExpressionBody(it)) }
        return proto.build()
    }

    fun serializeErrorDeclarationCarrier(carrier: ErrorDeclarationCarrier): PirErrorDeclarationCarrier {
        val proto = PirErrorDeclarationCarrier.newBuilder()
        proto.setLastModified(carrier.lastModified)
        carrier.parentField?.let { proto.setParentSymbol(serializeParent(it)) }
        proto.setOrigin(serializeOrigin(carrier.originField))
        proto.addAllAnnotation(carrier.annotationsField.map { serializeAnnotation(it) })
        return proto.build()
    }

    fun serializeFieldCarrier(carrier: FieldCarrier): PirFieldCarrier {
        val proto = PirFieldCarrier.newBuilder()
        proto.setLastModified(carrier.lastModified)
        carrier.parentField?.let { proto.setParentSymbol(serializeParent(it)) }
        proto.setOrigin(serializeOrigin(carrier.originField))
        proto.addAllAnnotation(carrier.annotationsField.map { serializeAnnotation(it) })
        proto.setType(serializeType(carrier.typeField))
        carrier.initializerField?.let { proto.setInitializer(serializeExpressionBody(it)) }
        carrier.correspondingPropertySymbolField?.let { proto.setCorrespondingPropertySymbol(serializePropertySymbol(it)) }
        return proto.build()
    }

    fun serializeFunctionCarrier(carrier: FunctionCarrier): PirFunctionCarrier {
        val proto = PirFunctionCarrier.newBuilder()
        proto.setLastModified(carrier.lastModified)
        carrier.parentField?.let { proto.setParentSymbol(serializeParent(it)) }
        proto.setOrigin(serializeOrigin(carrier.originField))
        proto.addAllAnnotation(carrier.annotationsField.map { serializeAnnotation(it) })
        proto.setReturnTypeField(serializeType(carrier.returnTypeFieldField))
        carrier.dispatchReceiverParameterField?.let { proto.setDispatchReceiverParameter(serializeValueParameter(it)) }
        carrier.extensionReceiverParameterField?.let { proto.setExtensionReceiverParameter(serializeValueParameter(it)) }
        carrier.bodyField?.let { proto.setBody(serializeBody(it)) }
        proto.setFlags(serializeVisibility(carrier.visibilityField))
        proto.addAllTypeParameters(carrier.typeParametersField.map { serializeTypeParameter(it) })
        proto.addAllValueParameters(carrier.valueParametersField.map { serializeValueParameter(it) })
        carrier.correspondingPropertySymbolField?.let { proto.setCorrespondingPropertySymbol(serializePropertySymbol(it)) }
        proto.addAllOverriddenSymbols(carrier.overriddenSymbolsField.map { serializeSimpleFunctionSymbol(it) })
        return proto.build()
    }

    fun serializeLocalDelegatedPropertyCarrier(carrier: LocalDelegatedPropertyCarrier): PirLocalDelegatedPropertyCarrier {
        val proto = PirLocalDelegatedPropertyCarrier.newBuilder()
        proto.setLastModified(carrier.lastModified)
        carrier.parentField?.let { proto.setParentSymbol(serializeParent(it)) }
        proto.setOrigin(serializeOrigin(carrier.originField))
        proto.addAllAnnotation(carrier.annotationsField.map { serializeAnnotation(it) })
        proto.setType(serializeType(carrier.typeField))
        carrier.delegateField?.let { proto.setDelegate(serializeVariable(it)) }
        carrier.getterField?.let { proto.setGetter(serializeFunction(it)) }
        carrier.setterField?.let { proto.setSetter(serializeFunction(it)) }
        return proto.build()
    }

    fun serializePropertyCarrier(carrier: PropertyCarrier): PirPropertyCarrier {
        val proto = PirPropertyCarrier.newBuilder()
        proto.setLastModified(carrier.lastModified)
        carrier.parentField?.let { proto.setParentSymbol(serializeParent(it)) }
        proto.setOrigin(serializeOrigin(carrier.originField))
        proto.addAllAnnotation(carrier.annotationsField.map { serializeAnnotation(it) })
        carrier.backingFieldField?.let { proto.setBackingField(serializeField(it)) }
        carrier.getterField?.let { proto.setGetter(serializeSimpleFunction(it)) }
        carrier.setterField?.let { proto.setSetter(serializeSimpleFunction(it)) }
        return proto.build()
    }

    fun serializeTypeAliasCarrier(carrier: TypeAliasCarrier): PirTypeAliasCarrier {
        val proto = PirTypeAliasCarrier.newBuilder()
        proto.setLastModified(carrier.lastModified)
        carrier.parentField?.let { proto.setParentSymbol(serializeParent(it)) }
        proto.setOrigin(serializeOrigin(carrier.originField))
        proto.addAllAnnotation(carrier.annotationsField.map { serializeAnnotation(it) })
        proto.addAllTypeParameters(carrier.typeParametersField.map { serializeTypeParameter(it) })
        proto.setExpandedType(serializeType(carrier.expandedTypeField))
        return proto.build()
    }

    fun serializeTypeParameterCarrier(carrier: TypeParameterCarrier): PirTypeParameterCarrier {
        val proto = PirTypeParameterCarrier.newBuilder()
        proto.setLastModified(carrier.lastModified)
        carrier.parentField?.let { proto.setParentSymbol(serializeParent(it)) }
        proto.setOrigin(serializeOrigin(carrier.originField))
        proto.addAllAnnotation(carrier.annotationsField.map { serializeAnnotation(it) })
        proto.addAllSuperTypes(carrier.superTypesField.map { serializeSuperType(it) })
        return proto.build()
    }

    fun serializeValueParameterCarrier(carrier: ValueParameterCarrier): PirValueParameterCarrier {
        val proto = PirValueParameterCarrier.newBuilder()
        proto.setLastModified(carrier.lastModified)
        carrier.parentField?.let { proto.setParentSymbol(serializeParent(it)) }
        proto.setOrigin(serializeOrigin(carrier.originField))
        proto.addAllAnnotation(carrier.annotationsField.map { serializeAnnotation(it) })
        carrier.defaultValueField?.let { proto.setDefaultValue(serializeExpressionBody(it)) }
        proto.setType(serializeType(carrier.typeField))
        carrier.varargElementTypeField?.let { proto.setVarargElementType(serializeType(it)) }
        return proto.build()
    }
}
