// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

public interface IrPropertyOrBuilder extends
    // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.backend.common.serialization.proto.IrProperty)
    org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
   */
  boolean hasBase();
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
   */
  org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase getBase();

  /**
   * <code>required int32 name = 2;</code>
   */
  boolean hasName();
  /**
   * <code>required int32 name = 2;</code>
   */
  int getName();

  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrField backing_field = 3;</code>
   */
  boolean hasBackingField();
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrField backing_field = 3;</code>
   */
  org.jetbrains.kotlin.backend.common.serialization.proto.IrField getBackingField();

  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getter = 4;</code>
   */
  boolean hasGetter();
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getter = 4;</code>
   */
  org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getGetter();

  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction setter = 5;</code>
   */
  boolean hasSetter();
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction setter = 5;</code>
   */
  org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getSetter();

  /**
   * <code>optional int64 backing_field_symbol = 6;</code>
   *
   * <pre>
   * for IC
   * </pre>
   */
  boolean hasBackingFieldSymbol();
  /**
   * <code>optional int64 backing_field_symbol = 6;</code>
   *
   * <pre>
   * for IC
   * </pre>
   */
  long getBackingFieldSymbol();

  /**
   * <code>optional int64 getter_symbol = 7;</code>
   */
  boolean hasGetterSymbol();
  /**
   * <code>optional int64 getter_symbol = 7;</code>
   */
  long getGetterSymbol();

  /**
   * <code>optional int64 setter_symbol = 8;</code>
   */
  boolean hasSetterSymbol();
  /**
   * <code>optional int64 setter_symbol = 8;</code>
   */
  long getSetterSymbol();
}